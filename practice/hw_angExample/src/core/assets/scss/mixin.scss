@import 'mixins/flexbox';

@mixin ellipsis($width: 200px) {
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin clf {

  &:before, &:after {
    display: table;
    content: "";
  }

  &:after {
    clear: both;
  }

}

@mixin animation($keyframes, $duration: 4s, $function: linear) {
  -webkit-animation: $keyframes $duration $function;
  -moz-animation: $keyframes $duration $function;
  -o-animation: $keyframes $duration $function;
  animation: $keyframes $duration $function;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @-moz-keyframes #{$animationName} {
    @content;
  }

  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin svg($name, $width, $height) {
  display: inline-block;
  width: #{$width}px;
  height: #{$height}px;
  background: url('/' + $name + '.svg');
  background-size: #{$width}px #{$height}px;
  //background-image: inline-image('icons/svg/'+$sprite+'.svg','image/svg'); // to switches sprites to base64, elegant
}

// width
@mixin r($width) {
  @media only screen and (max-width: $width + "px") {
    @content;
  }
}

// height
@mixin rh($height) {
  @media only screen and (max-height: $height + "px") {
    @content;
  }
}

/* TODO: clean up deprecated "fs" mixin everywhere  */
// @mixin fs($sizeValue: 16) {
//   font-size: $sizeValue + px;
//   font-size: $sizeValue / 10 + rem;
// }

@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin ie {
  *display: inline;
  *zoom: 1;
}

%pseudo {
  position: relative;
  &:before, &:after {
    content: " ";
    position: absolute;
    top: 0;
    left: 0;
  }
}

@mixin pseudo {
  @extend %pseudo;
}

@mixin coverdiv {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin cover {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 50% 50%;
}

@mixin bg-size($width: 100%, $height: 100%) {
  -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
  background-size: $width $height;
}

// retina, also available as +hdpi
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
    @content;
  }
}

@mixin box {
  @include box-sizing(border-box);
}

// vertical-align at center
@mixin vcenter {
  position: absolute;
  top: 50%;
  left: 50%;
  @include translate(-50%, -50%);
}

//simple gradient
@mixin g($color1, $color2) {
  @include background-image(linear-gradient($color1, $color2));
}

@mixin gh($color1, $color2) {
  @include background-image(linear-gradient(left, $color1, $color2));
}

// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  -moz-transform: rotate($deg + deg);
  -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
  -ms-transform: rotate($deg + deg);
  transform: rotate($deg + deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=$m11, M12=$m12, M21=$m21, M22=$m22, sizingMethod='auto expand');
  zoom: 1;
}

// TRANSITION
@mixin transition($what) {
  -moz-transition: $what;
  -o-transition: $what;
  -webkit-transition: $what;
  -ms-transition: $what;
  transition: $what;
}

@mixin tr($what) {
  @include transition($what);
}

@mixin hide-text {
  font: 0 / 0 a;
  text-shadow: none;
  color: transparent;
}

@mixin hidetext {
  @include hide-text;
}

@mixin vertical {
  text-align: center;
  font-size: 0;
  &:before {
    content: "";
    display: inline-block;
    vertical-align: middle;
    width: 0;
    height: 100%;
  }
}

@mixin vert {
  font-size: 0;
  &:before {
    content: "";
    display: inline-block;
    vertical-align: middle;
    width: 0;
    height: 100%;
  }
}

@mixin clr {
  &:after {
    content: " ";
    display: table;
    clear: both;
  }
  *zoom: 1;
}

@mixin placeholder-color($color) {
  &:-moz-placeholder,
  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

@mixin placeholder {
  &:-ms-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
  &::placeholder {
    @content;
  }
}

@mixin gray {
  filter: grayscale(100%);
  filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1);
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)";
}

@mixin gray-half {
  filter: grayscale(50%);
  filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=0.5);
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=0.5)";
}

@mixin gray-zero {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale");
  -webkit-filter: grayscale(0%);
}

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin nosel {
  @include unselectable;
}

@mixin prevent-text {
  -ms-word-break: break-all;
  word-break: break-all;
  word-wrap: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin selection {
  & ::selection {
    @content;
  }
  & ::-moz-selection {
    @content;
  }
}

@mixin sel {
  @include selection;
}

@mixin gpu {
  @include transform(translate3d(0, 0, 0));
}

@mixin smooth-triangle {
  -webkit-transform: rotate(0.05deg);
  -moz-transform: scale(1.1);
  -o-transform: rotate(0.05deg);
  transform: rotate(0.05deg);
}

@mixin scrollbar {
  &::-webkit-scrollbar {
    @content;
  }
}

@mixin scrollbar-track {
  &::-webkit-scrollbar-track {
    @content;
  }
}

@mixin scrollbar-thumb {
  &::-webkit-scrollbar-thumb {
    @content;
  }
}

@mixin scrollbar-track-piece {
  &::-webkit-scrollbar-track-piece {
    @content;
  }
}

//triangle
@mixin arr($width, $height, $bg, $direction) {
  width: 0px;
  height: 0px;
  border-style: solid;
  @if $direction == t {
    border-width: 0 $width / 2 + px $height + px $width / 2 + px;
    border-color: transparent transparent $bg transparent;
  }
  @if $direction == r {
    border-width: $height / 2 + px 0 $height / 2 + px $width + px;
    border-color: transparent transparent transparent $bg;
  }
  @if $direction == b {
    border-width: $height + px $width / 2 + px 0 $width / 2 + px;
    border-color: $bg transparent transparent transparent;
  }
  @if $direction == l {
    border-width: $height / 2 + px $width + px $height / 2 + px 0;
    border-color: transparent $bg transparent transparent;
  }
  @if $direction == tl {
    border-width: $height + px $width + px 0 0;
    border-color: $bg transparent transparent transparent;
  }
  @if $direction == tr {
    border-width: 0 $width + px $height + px 0;
    border-color: transparent $bg transparent transparent;
  }
  @if $direction == br {
    border-width: 0 0 $height + px $width + px;
    border-color: transparent transparent $bg transparent;
  }
  @if $direction == bl {
    border-width: $height + px 0 0 $width + px;
    border-color: transparent transparent transparent $bg;
  }
}

// example
// +arr(500,50, #000, l)
// +arr(500,50, #000, bl)

@mixin rotate($var) {
  -ms-transform: rotate($var + deg);
  -webkit-transform: rotate($var + deg);
  transform: rotate($var + deg);
}

@mixin blur($var) {
  -webkit-filter: blur($var);
  filter: blur($var);
}

@mixin scale($var) {
  -ms-transform: scale($var);
  -webkit-transform: scale($var);
  transform: scale($var);
}

@mixin translate($x, $y) {
  -ms-transform: translate($x, $y);
  -webkit-transform: translate($x, $y);
  transform: translate($x, $y);
}

@mixin counter($var, $sep) {
  counter-reset: list + $var;
  > li {
    &:before {
      content: counter(list + $var) $sep;
      counter-increment: list + $var;
    }
  }
}

@mixin size($width, $height) {
  font-size: $height + px;
  width: ($height / $width) + em;
}

@mixin centered($width, $height) {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -($width/2) + px;
  margin-top: -($height/2) + px;
}

// common font
@mixin f {
  font-family: 'Source Sans Pro', Arial, sans-serif;
  font-weight: 400;
}

@mixin fs {
  font-weight: 600;
}
