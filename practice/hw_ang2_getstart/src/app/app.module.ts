import { ClassField } from '@angular/compiler/src/output/output_ast';
import { Class, Inject, Injectable, InjectableDecorator, NgModule } from '@angular/core';
import { inject } from '@angular/core/testing';
import { HttpModule } from '@angular/http';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';

import { AppComponent }  from './app.component';
import { WelcomeComponent } from './home/welcome.component';
import { ProductModule } from './products/product.module' ;

@NgModule({
  imports: [ // регистрация модулей ангуляра.
    //   Можно реакспортировать весь модуль если нужно ре- экспортировать их компоненты, директивы и пайпы.
    //  Можно ре экспортировать элемент без его импортирования перед этим
    // Импортируемым модулям доступны любые экспортируемые компоненты, директивы и пайпы из этого модуля
    // При импорте модуля импортировать дополнтельно его содержимое не нужно
    // Импортируемый модуль не дает доступ к модулям которые сам импортировал
      BrowserModule,
      HttpModule,
      RouterModule.forRoot([
          { path: 'welcome', component: WelcomeComponent },
          { path: '', redirectTo: 'welcome', pathMatch: 'full'},
          { path: '**', redirectTo: 'welcome', pathMatch: 'full'}
      ]),
      ProductModule
  ],
  declarations: [ /*регистрация коспонентов пользователя. 
   - Декларация компонента, диретивы или пайпа может быть осуществлена только в одном модуле ангуляра. 
   - Декларируются ТОЛЬКО компонеты, дериктивы и пайпыю 
   -  Никогда не делать передекларацию компонетов, директив или пайпов принадлежащих другому модулю. 
   - Все задекларированные компонеты,директивы и пайпы по умолчанию приватны 
  и доступны только другим компонентам, директивам и пайпам из ЭТОГО ЖЕ модуля. 
   - При этом можно экспортировать любой компонент, директиву или пайп если другой компонент в них нуждается */
      AppComponent,
      WelcomeComponent
   ],
   providers: [], // регистрация сервисов. Сервисы никогда не экспортируются
   // Сервисы всегда регистрируются в рут модуле, т.е. в главном (app)
   //  Сервисы НЕ добавляются в провайдер шарящегося модуля(модуль который будет расшарен)
   // Routing guard должен быть добавлен в маcсив провайдера модуля ангуляра
   bootstrap: [ AppComponent ] /*указываем что для запуска приложения используется AppComponent, 
   бутстрап загрузка масива может быть использована только в рут модуле => AppModule*/
})
export class AppModule { }

/*Основные составные части =>

    Модули => это набор компонентов, директив, сервисов, пайпов объединенных в один большой конгломират, 
    позволяет достич модульности приложения ,

    Компоненты => говорит ангуляру,
        selector - как и где вьюхе отобразить наш шаблон,
        templateUrl - где находится наш шаблон,
        styleUrls - где находятся стили для нашего шаблона,
        а также можем указывать инпуты и оутпуты нашего компонента и др

    директивы => тот же компонент только без шаблона, используется для изменения поведения 
    одного или нескольких ДОМ элементов,

    сервисы => тут хранится стейт (состояние) и логика по изменению стейта (состояния), модельки приложения,

    пайпы => трансформер, котрый принимает некое знячение и выдает строку, 
    которую ангуляр будет биндить в ДОМ элемент, используется для изменение данных
     для отображения темплейта(шаблона)

Синтаксис template (шаблонов) =>
    {{}} - интерполяция (вывод значения переменной),

    [] - биндинг свойства (прокидывание данных внутрь компонента),

    () - биндинг евента (события, т.е. оутпут),

    # - объявление переменной,

    * - для структурных директив (директивы которые меняют шаблон),
    
    [()] - реализация двухстороннего биндинга, изменение как из дом элемента со стороны пользователя 
    так и из серверной части приходят значения

@Decorator  => декорировать можно классы, свойства и переменные

NgModule metadata =>

- Bootstrap массив => это стартап компоненты
- Declaration => Декларационный массив, это элементы котрые принадлежат этому модулю
- Exports => Экспортируемый массив, это импортируемые модули, которые можно использовать
- Imports => Импортируемый массив, это поддерживаемые модули в которых нуждается модуль
- Providers => Провайдер массив, это сервисные провадеры, эти сервисы могут быть 
подключены к любому классу в приложении
*/

